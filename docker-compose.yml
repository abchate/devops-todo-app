version: "3.8"

services:
  # Service backend principal (blue)
  backend-blue:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: devops-todo-app-backend-blue
    expose:
      - "5000"
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    networks:
      - app-network
    labels:
      - "deployment=blue"

  # Service backend de secours (green)
  backend-green:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: devops-todo-app-backend-green
    expose:
      - "5000"
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    networks:
      - app-network
    labels:
      - "deployment=green"
    # Par défaut, le green ne reçoit pas de trafic
    profiles:
      - green-deployment
  
  # Proxy Nginx pour le backend (blue/green)
  backend-proxy:
    image: nginx:alpine
    container_name: devops-todo-app-backend-proxy
    ports:
      - "9090:80"
    volumes:
      - ./nginx/backend-proxy.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend-blue
    restart: unless-stopped
    networks:
      - app-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: devops-todo-app-frontend
    ports:
      - "80:80"
    depends_on:
      - backend-proxy
    environment:
      - VITE_BACKEND_URL=http://localhost:9090/api
    restart: unless-stopped
    networks:
      - app-network

  # Prometheus
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/alert-rules.yml:/etc/prometheus/alert-rules.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - app-network

  # Alertmanager
  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    networks:
      - app-network

  # Grafana
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=supermotdepasse
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - app-network

volumes:
  grafana-storage:

networks:
  app-network:
    driver: bridge
